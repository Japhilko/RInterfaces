library("leaflet")
url <- "https://raw.githubusercontent.com/Japhilko/
GeoData/master/2015/data/whcSites.csv"
whcSites <- read.csv(url)
library("magrittr")
library("leaflet")
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=whcSites$lon,
lat=whcSites$lat,
popup=whcSites$name_en)
m
whcSites$color <- "red"
whcSites$color[whcSites$category=="Cultural"] <- "blue"
whcSites$color[whcSites$category=="Mixed"] <- "orange"
m1 <- leaflet() %>%
addTiles() %>%
addCircles(lng=whcSites$lon,
lat=whcSites$lat,
popup=whcSites$name_en,
color=whcSites$color)
install.packages("plotly")
library("plotly")
library(plotly)
p <- plot_ly(midwest, x = ~percollege, color = ~state, type = "box")
p
midwest
install.packages("DataTables")
install.packages('DT')
library(('DT'))
library('DT')
gitpath2 <- "C:/Users/kolbjp/Documents/GitHub/RInterfaces"
setwd(gitpath2)
load("data/exdat.RData")
datatable(exdat, options = list(), class = "display", callback = JS("return table;"),
rownames, colnames, container, caption = NULL, filter = c("none", "bottom",
"top"), escape = TRUE, style = "default", width = NULL, height = NULL,
elementId = NULL, fillContainer = getOption("DT.fillContainer", NULL), autoHideNavigation = getOption("DT.autoHideNavigation",
NULL), selection = c("multiple", "single", "none"), extensions = list(),
plugins = NULL)
datatable(exdat)
load("data/exdat.RData")
datatable(exdat)
library(visNetwork)
install.packages("visNetwork")
library(visNetwork)
url <- "http://api.openstreetmap.org/api/0.6/
relation/62422"
library(XML)
BE <- xmlParse(url)
library(xml2)
BE <- xmlParse(url)
url <- "http://api.openstreetmap.org/api/0.6/relation/62422"
BE <- xmlParse(url)
url2 <- "http://api.openstreetmap.org/api/0.6/node/2923760808"
RennesBa <- xmlParse(url2)
RennesBa
url3 <- "http://api.openstreetmap.org/api/0.6/way/72799743"
MadCalle <- xmlParse(url3)
MadCalle
library("RJSONIO")
con <- url("http://nominatim.openstreetmap.org/search?format=json&
addressdetails=1&extratags=1&q=Mannheim+B2,1")
geoc <- fromJSON(paste(readLines(con,warn=F),
collapse = ''))
close(con)
geoloc <- c(geoc[[1]][which(names(geoc[[1]])=="lat")],
geoc[[1]][which(names(geoc[[1]])=="lon")])
df_adr <- data.frame(rbind(c(geoloc$lat,geoloc$lon)))
colnames(df_adr) <- c("lat","lon")
xtable(df_adr,caption = "Latitude and longitude coordinates of the address Mannheim B2,1")
library(xtable)
xtable(df_adr,caption = "Latitude and longitude coordinates of the address Mannheim B2,1")
knitr::opts_chunk$set(echo = TRUE,eval=F)
library("RPostgreSQL")
pw <- {"1234"}
drv <- dbDriver("PostgreSQL")
pw <- {"1234"}
con <- dbConnect(drv, dbname = "offlgeocRLP",
host = "localhost", port = 5432,
user = "postgres", password = pw)
dbExistsTable(con, "planet_osm_polygon")
df_postgres <- dbGetQuery(con, "SELECT name, admin_level FROM planet_osm_polygon WHERE boundary='administrative'")
df_postgres
nrow(df_postgres)
table(df_postgres[,2])
barplot(table(df_postgres[,2]))
barplot(table(df_postgres[,2]),col="royalblue")
df_adm8 <- dbGetQuery(con, "SELECT name, admin_level FROM planet_osm_polygon WHERE boundary='administrative' AND admin_level=8")
df_adm8 <- dbGetQuery(con, "SELECT name, admin_level FROM planet_osm_polygon WHERE boundary='administrative' AND admin_level='8'")
df_adm8
kable(head(df_adm8))
library(knitr)
install.packages("knitr")
library(knitr)
kable(head(df_adm8))
library(knitr)
library("RPostgreSQL")
pw <- {"1234"}
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "offlgeocRLP",
host = "localhost", port = 5432,
user = "postgres", password = pw)
rm(pw) # removes the password
dbExistsTable(con, "planet_osm_polygon")
library(knitr)
kable(head(df_adm8))
library(knitr)
# kable(head(df_adm8))
df_hnr <- dbGetQuery(con, "SELECT addr:housenumber FROM planet_osm_polygon WHERE boundary='administrative' AND admin_level='8' AND name='Hornbach'")
df_hnr <- dbGetQuery(con, "SELECT addr:housenumber FROM planet_osm_polygon WHERE name='Hornbach'")
df_hnr <- dbGetQuery(con, "SELECT * FROM osm_lines,osm_points
WHERE osm_lines.name=='Benzolstraße' AND osm_lines.highway IN ('motorway','trunk','primary')
AND osm_points.name=='Ludwigshafen' AND osm_points.place IN ('city', 'town')
ORDER BY ST_Distance(osm_lines.way, osm_points.way) ASCENDING
LIMIT 1")
df_hnr <- dbGetQuery(con, "SELECT * FROM planet_osm_line, planet_osm_point
WHERE planet_osm_line.name='Benzolstraße' AND planet_osm_line.highway IN ('motorway','trunk','primary')
AND planet_osm_point.name='Ludwigshafen' AND planet_osm_point.place IN ('city', 'town')
ORDER BY ST_Distance(planet_osm_line.way, planet_osm_point.way)")
df_hnr
df_hnr <- dbGetQuery(con, "SELECT * FROM planet_osm_line, planet_osm_point
WHERE planet_osm_line.name='Nordring' AND planet_osm_line.highway IN ('motorway','trunk','primary')
AND planet_osm_point.name='Ludwigshafen' AND planet_osm_point.place IN ('city', 'town')
ORDER BY ST_Distance(planet_osm_line.way, planet_osm_point.way)")
df_hnr <- dbGetQuery(con, "SELECT * FROM planet_osm_line, planet_osm_point
WHERE planet_osm_line.name='Nordring' AND planet_osm_point.name='Ludwigshafen'
ORDER BY ST_Distance(planet_osm_line.way, planet_osm_point.way)")
df_hnr
head(df_hnr)
colnames(df_)
df_ <- dbGetQuery(con, "SELECT * FROM planet_osm_line, planet_osm_point
WHERE planet_osm_line.name='Nordring' AND planet_osm_point.name='Ludwigshafen'
ORDER BY ST_Distance(planet_osm_line.way, planet_osm_point.way)")
head(df_hnr)
colnames(df_)
table(df_$name)
install.packages("plot3D")
library(plot3D)
library(RPostgreSQL)
df_sipp <- dbGetQuery(con, "SELECT * FROM planet_osm_line, planet_osm_point
WHERE planet_osm_line.name='Rechweg' AND planet_osm_point.name='Sippersfeld'
ORDER BY ST_Distance(planet_osm_line.way, planet_osm_point.way)")
head(df_sipp)
pw <- {"1234"}
drv <- dbDriver("PostgreSQL")
# install.packages("RPostgreSQL")
library("RPostgreSQL")
pw <- {"1234"}
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "offlgeocRLP",
host = "localhost", port = 5432,
user = "postgres", password = pw)
rm(pw) # removes the password
dbExistsTable(con, "planet_osm_polygon")
restnam <- dbGetQuery(con, "SELECT name, COUNT(osm_id) AS anzahl
FROM planet_osm_point
WHERE amenity = 'restaurant'
AND name <> ''
GROUP BY name
ORDER BY anzahl DESC
LIMIT 10")
head(restnam)
getwd()
setwd("slides/")
library("knitr")
purl("RPostgreSQL.Rmd")
library("RPostgreSQL")
pw <- {"1234"}
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "offlgeocRLP",
host = "localhost", port = 5432,
user = "postgres", password = pw)
rm(pw) # removes the password
dbExistsTable(con, "planet_osm_polygon")
df_adm8 <- dbGetQuery(con, "SELECT name, admin_level FROM planet_osm_polygon WHERE boundary='administrative' AND admin_level='8'")
head(df_adm8)
dbWriteTable(con, "df_adm8", df_adm8)
df_adm1 <- dbGetQuery(con, "SELECT name, admin_level FROM planet_osm_polygon WHERE boundary='administrative' AND admin_level='1'")
df_adm1
df_adm1 <- dbGetQuery(con, "SELECT name, admin_level FROM planet_osm_polygon WHERE boundary='administrative' AND admin_level='2'")
df_adm1
df_adm1 <- dbGetQuery(con, "SELECT name, admin_level FROM planet_osm_polygon WHERE boundary='administrative' AND admin_level='5'")
df_adm1
df_adm8 <- dbGetQuery(con, "SELECT name, admin_level FROM planet_osm_polygon WHERE boundary='administrative' AND admin_level='8'")
df_adm8
df_adm9 <- dbGetQuery(con, "SELECT name, admin_level FROM planet_osm_polygon WHERE boundary='administrative' AND admin_level='9'")
df_adm9
df_adm10 <- dbGetQuery(con, "SELECT name, admin_level FROM planet_osm_polygon WHERE boundary='administrative' AND admin_level='10'")
df_adm10
df_adm11 <- dbGetQuery(con, "SELECT name, admin_level FROM planet_osm_polygon WHERE boundary='administrative' AND admin_level='11'")
df_adm11
