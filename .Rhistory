m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
library(leaflet)
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
m %>% addTiles()
m %>% addProviderTiles(Stamen.Toner)
m %>% addProviderTiles("Stamen.Toner")
m %>% addProviderTiles("CartoDB.Positron")
leaflet() %>% addTiles() %>% setView(-93.65, 42.0285, zoom = 4) %>%
addWMSTiles(
"http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi",
layers = "nexrad-n0r-900913",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Weather data © 2012 IEM Nexrad"
)
m %>% addProviderTiles(providers$MtbMap) %>%
addProviderTiles(providers$Stamen.TonerLines,
options = providerTileOptions(opacity = 0.35)) %>%
addProviderTiles(providers$Stamen.TonerLabels)
m %>% addProviderTiles("OpenTopoMap")
m %>% addProviderTiles("Thunderforest.OpenCycleMap")
m %>% addProviderTiles(providers$MtbMap) %>%
addProviderTiles("Stamen.TonerLines",
options = providerTileOptions(opacity = 0.35)) %>%
addProviderTiles("Stamen.TonerLabels")
m %>% addProviderTiles("MtbMap") %>%
addProviderTiles("Stamen.TonerLines",
options = providerTileOptions(opacity = 0.35)) %>%
addProviderTiles("Stamen.TonerLabels")
greenLeafIcon <- makeIcon(
iconUrl = "http://leafletjs.com/examples/custom-icons/leaf-green.png",
iconWidth = 38, iconHeight = 95,
iconAnchorX = 22, iconAnchorY = 94,
shadowUrl = "http://leafletjs.com/examples/custom-icons/leaf-shadow.png",
shadowWidth = 50, shadowHeight = 64,
shadowAnchorX = 4, shadowAnchorY = 62
)
leaflet(data = quakes[1:4,]) %>% addTiles() %>%
addMarkers(~long, ~lat, icon = greenLeafIcon)
leaflet(quakes) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)
install.packages("flexdashboard", type = "source")
install.packages("RMySQL")
citation("knitr")
citation("RMySQL")
citation("foreign")
citation("tabplotd3")
citation("ggplot2")
citation("ggvis")
citation("dplyr")
citation("googleVis")
citation("SVGAnnotation")
install.packages("SVGAnnotation")
citation("devtools")
citation("d3Network")
citation("Rook")
citation("dygraphs")
install.packages("dygraphs")
citation("dygraphs")
types <- c("source", "win.binary",
"mac.binary", "mac.binary.mavericks")
CRANmirror <- "http://cran.revolutionanalytics.com"
pdb <- lapply(types, function(x){
cran <- contrib.url(repos = CRANmirror,
type = x)
available.packages(contriburl = cran, type = x)
})
names(pdb) <- types
str(pdb, max.level = 1)
sapply(pdb, nrow)
CRANmirror <- "http://cran.revolutionanalytics.com"
cran <- contrib.url(repos = CRANmirror,
type = "source")
cran
available.packages(contriburl = cran, type = x)
info <- available.packages(contriburl = cran, type = x)
nrow(info)
library(devtools)
install_github("tiagomendesdantas/Rspotify")
802*6
80*6
35*6
300+50+480+210+570
install.packages("rmdformats")
install.packages("rticles")
install.packages("ProjectTemplate")
library(jsonlite)
res <- fromJSON('http://ergast.com/api/f1/2004/1/results.json')
drivers <- res$MRData$RaceTable$Races$Results[[1]]$Driver
colnames(drivers)
hadley_repos <- fromJSON("https://api.github.com/users/hadley/repos")
hadley_repos
head(hadley_repos)
nrow(hadley_repos)
my_repos <- fromJSON("https://api.github.com/users/japhilko/repos")
my_repos
nrow(my_repos)
my_repos[1,]
?install.packages
install.packages("curl")
getwd()
setwd("slides/")
my_repos <- fromJSON("data/RomDrinkingWater.geojson")
library("jsonlite")
my_repos <- fromJSON("data/RomDrinkingWater.geojson")
my_repos
head(DRINKWATER)
DRINKWATER <- fromJSON("data/RomDrinkingWater.geojson")
head(DRINKWATER)
head(DRINKWATER$features)
kable(head(DRINKWATER$features))
names(DRINKWATER$features)
names(DRINKWATER)
kable(head(DRINKWATER$features))
my_repos <- fromJSON("https://api.github.com/users/japhilko/repos")
names(my_repos)
kable(DRINKWATER$features[1:4,1:4])
library(knitr)
kable(DRINKWATER$features[1:4,1:4])
DRINKWATER$features[1:4,1:4]
names(DRINKWATER)
library(xml2)
library(knitr)
kable(head(DRINKWATER$features))
head(DRINKWATER$features)
kable(head(data.frame(DRINKWATER$features)))
head(DRINKWATER$features)
head(DRINKWATER$features[,1:4])
head(DRINKWATER$features[[1]][,1:4])
purl("rapis.Rmd")
library(httr)
r <- GET("http://httpbin.org/get")
r
library("stringi")
library("tm")
library("FactoMineR")
wiki <- "http://de.wikipedia.org/wiki/"
titles <- c("Zika-Virus", "Influenza-A-Virus_H1N1", "Spanische_Grippe", "Influenzavirus","Vogelgrippe_H5N1","Legionellose-Ausbruch_in_Warstein_2013", "Legionellose-Ausbruch_in_Jülich_2014")
articles <- character(length(titles))
for (i in 1:length(titles)){
articles[i] <- stri_flatten(readLines(stri_paste(wiki, titles[i])), col = " ")
}
docs <- Corpus(VectorSource(articles))
graph <- PCA(s)
?PCA
shiny::runApp('misc/shinyApp/FirstShinyEx')
setwd("D:/Eigene Dateien/Dokumente/GitHub/RInterfaces/slides")
install.packages("RMySQL")
install.packages("rmdformats")
install.packages("rmdformats")
install.packages("ProjectTemplate")
library(readr)
rows <- read_csv("https://data.montgomerycountymd.gov/api/views/6rqk-pdub/rows.csv?accessType=DOWNLOAD")
View(rows)
url <- "https://raw.githubusercontent.com/Japhilko/
GeoData/master/2015/data/whcSites.csv"
whcSites <- read.csv(url)
link<- "http://www.statistik.at/web_de/static/
mz_2013_sds_-_datensatz_080469.sav"
Dat <- read.spss(link,to.data.frame=T)
write.dta(mydata,file="mydata.dta")
library(foreign)
write.dta(mydata,file="mydata.dta")
A <- c(1,2,3,4)
B <- c("A","B","C","D")
mydata <- data.frame(A,B)
getwd()
write.dta(mydata,file="data/mydata.dta")
convert("data/mtcars.dta", "data/mtcars.sav")
library("rio")
convert("data/mtcars.dta", "data/mtcars.sav")
library(flexdashboard)
library(haven)
oecd <- read_dta("https://github.com/Japhilko/IntroR/raw/master/2017/data/oecd.dta")
oecd$Einkommen
library(ggplot2)
qplot(oecd$Einkommen)
qplot(oecd$Einkommen,col="chocolate1")
qplot(oecd$Einkommen,col="chocolate1",fill="royalblue")
qplot(oecd$Einkommen,fill="royalblue")
qplot(oecd$Einkommen,fill=oecd$Armut)
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=whcSites$lon,
lat=whcSites$lat,
popup=whcSites$name_en)
m
whcSitesDat2
url <- "https://raw.githubusercontent.com/Japhilko/
GeoData/master/2015/data/whcSites.csv"
whcSites <- read.csv(url)
whcSitesDat2 <- with(whcSites,data.frame(name_en,category,longitude,latitude,date_inscribed,area_hectares,danger_list))
library('DT')
datatable(whcSitesDat2)
library(ggplot2)
qplot(whcSitesDat2$category)
leaflet() %>%
addTiles() %>%
addMarkers(data = coffee_shops, group = "Food & Drink") %>%
addMarkers(data = restaurants, group = "Food & Drink") %>%
addMarkers(data = restrooms, group = "Restrooms")
library("magrittr")
leaflet() %>%
addTiles() %>%
addMarkers(data = coffee_shops, group = "Food & Drink") %>%
addMarkers(data = restaurants, group = "Food & Drink") %>%
addMarkers(data = restrooms, group = "Restrooms")
library("leaflet")
leaflet() %>%
addTiles() %>%
addMarkers(data = coffee_shops, group = "Food & Drink") %>%
addMarkers(data = restaurants, group = "Food & Drink") %>%
addMarkers(data = restrooms, group = "Restrooms")
outline <- quakes[chull(quakes$long, quakes$lat),]
map <- leaflet(quakes) %>%
# Base groups
addTiles(group = "OSM (default)") %>%
addProviderTiles(providers$Stamen.Toner, group = "Toner") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Toner Lite") %>%
# Overlay groups
addCircles(~long, ~lat, ~10^mag/5, stroke = F, group = "Quakes") %>%
addPolygons(data = outline, lng = ~long, lat = ~lat,
fill = F, weight = 2, color = "#FFFFCC", group = "Outline") %>%
# Layers control
addLayersControl(
baseGroups = c("OSM (default)", "Toner", "Toner Lite"),
overlayGroups = c("Quakes", "Outline"),
options = layersControlOptions(collapsed = FALSE)
)
map
outline <- quakes[chull(quakes$long, quakes$lat),]
leaflet(quakes)
map <- leaflet(quakes) %>%
# Base groups
addTiles(group = "OSM (default)") %>%
addProviderTiles(Stamen.Toner, group = "Toner") %>%
addProviderTiles(Stamen.TonerLite, group = "Toner Lite") %>%
# Overlay groups
addCircles(~long, ~lat, ~10^mag/5, stroke = F, group = "Quakes") %>%
addPolygons(data = outline, lng = ~long, lat = ~lat,
fill = F, weight = 2, color = "#FFFFCC", group = "Outline") %>%
# Layers control
addLayersControl(
baseGroups = c("OSM (default)", "Toner", "Toner Lite"),
overlayGroups = c("Quakes", "Outline"),
options = layersControlOptions(collapsed = FALSE)
)
map
map <- leaflet(quakes) %>%
# Base groups
addTiles(group = "OSM (default)") %>%
addProviderTiles("Stamen.Toner", group = "Toner") %>%
addProviderTiles("Stamen.TonerLite", group = "Toner Lite") %>%
# Overlay groups
addCircles(~long, ~lat, ~10^mag/5, stroke = F, group = "Quakes") %>%
addPolygons(data = outline, lng = ~long, lat = ~lat,
fill = F, weight = 2, color = "#FFFFCC", group = "Outline") %>%
# Layers control
addLayersControl(
baseGroups = c("OSM (default)", "Toner", "Toner Lite"),
overlayGroups = c("Quakes", "Outline"),
options = layersControlOptions(collapsed = FALSE)
)
map
load("J:/Work/Statistik/Kolb/Vorträge/20151003_Georef_SurveyT/data/Sindelfingen.Rdata")
(load("J:/Work/Statistik/Kolb/Vorträge/20151003_Georef_SurveyT/data/Sindelfingen.Rdata"))
head(Sindel1)
nrow(Sindel1)
install.packages("microbenchmark")
devtools::install_github("ropensci/sofa")
install.packages("jsonlite")
install.packages("jsonlite")
devtools::install_github("ropensci/sofa")
library(ggmap)
geocode("Mannheim B2,1")
url <- "https://raw.githubusercontent.com/Japhilko/GeoData/master/2015/data/whcSites.csv"
whcSites <- read_csv(url)
library(readr)
library(readr)
url <- "https://raw.githubusercontent.com/Japhilko/GeoData/master/2015/data/whcSites.csv"
whcSites <- read_csv(url)
whcSites
head(whcSites)
url <- "https://raw.githubusercontent.com/Japhilko/
GeoData/master/2015/data/whcSites.csv"
whcSites <- read.csv(url)
head(whcSites)
head(data.frame(whcSites$name_en,whcSites$category))
library(knitr)
kable(mydata)
A <- c(1,2,3,4)
B <- c("A","B","C","D")
mydata <- data.frame(A,B)
library(knitr)
kable(mydata)
mydata
kable(mydata)
library(knitr)
kable(mydata)
mydata <- data.frame(A,B)
mydata
kable(mydata)
write.csv(mydata,file="mydata.csv")
getwd()
library(foreign)
?foreign
install.packages("tufte")
install.packages("highcharter", type = "source")
whcSites2 <- whcSites %>%
data.frame(name_en,category)
library(magrittr)
whcSites2 <- whcSites %>%
data.frame(name_en,category)
str1 = "A scratch? Your arm's off."
str2 = "I've had worse."
str1 %>% substr(3,9)
str1
str1 <- "Hallo Welt"
str1 %>% substr(1,5)
str1 %>% substr(1,5) %>% toupper()
leaflet(quakes)
library("leaflet")
leaflet(quakes)
leaflet(quakes)%>%
addTiles()
leaflet(quakes)%>%
addTiles()%>%
addCircles(~long, ~lat)
m2 <- leaflet() %>%
addTiles(group = "OSM (default)") %>%
addCircles(lng=whcSites$lon,
lat=whcSites$lat,
popup=whcSites$name_en,
color=whcSites$color) %>%
addLayersControl(
baseGroups = c("OSM (default)", "Toner", "Toner Lite"),
overlayGroups = c("Quakes", "Outline"),
options = layersControlOptions(collapsed = FALSE)
)
m2
m2 <- leaflet() %>%
addTiles(group = "OSM (default)") %>%
addCircles(lng=whcSites$lon,
lat=whcSites$lat,
popup=whcSites$name_en,
color=whcSites$color) %>%
addLayersControl(
baseGroups = c("OSM (default)", "Toner", "Toner Lite"),
options = layersControlOptions(collapsed = FALSE)
)
m2
m2 <- leaflet() %>%
addTiles(group = "OSM (default)") %>%
addProviderTiles("Stamen.Toner", group = "Toner") %>%
addProviderTiles("Stamen.TonerLite", group = "Toner Lite") %>%
addCircles(lng=whcSites$lon,
lat=whcSites$lat,
popup=whcSites$name_en,
color=whcSites$color) %>%
addLayersControl(
baseGroups = c("OSM (default)", "Toner", "Toner Lite"),
options = layersControlOptions(collapsed = FALSE)
)
m2
m2 <- leaflet() %>%
addTiles(group = "OSM (default)") %>%
addProviderTiles("Stamen.Toner", group = "Toner") %>%
addProviderTiles("Stamen.TonerLite", group = "Toner Lite") %>%
addCircles(lng=whcSites$lon,
lat=whcSites$lat,
popup=whcSites$name_en) %>%
addLayersControl(
baseGroups = c("OSM (default)", "Toner", "Toner Lite"),
options = layersControlOptions(collapsed = FALSE)
)
m2
library(tabplotd3)
library(ggplot2)
data(diamonds)
tableplot(diamonds)
tabplotd3
tableplot(diamonds, numMode = "MB-ML")
library("ggvis")
library(dplyr)
mtcars %>% ggvis(~wt, ~mpg) %>% layer_points()
library(googleVis)
library(googleVis)
op <- options(gvis.plot.tag = "chart")
CityPopularity$Mean=mean(CityPopularity$Popularity)
CC <- gvisComboChart(CityPopularity, xvar='City',
yvar=c('Mean', 'Popularity'),
options=list(seriesType='bars',
width=450, height=300,
title='City Popularity',
series='{0: {type:\"line\"}}'))
plot(CC)
gvisComboChart(CityPopularity, xvar='City',
yvar=c('Mean', 'Popularity'),
options=list(seriesType='bars',
width=450, height=300,
title='City Popularity',
series='{0: {type:\"line\"}}'))
mtcars %>%
ggvis(~wt, ~mpg) %>%
layer_smooths(span = input_slider(0.5, 1, value = 1)) %>%
layer_points(size := input_slider(100, 1000, value = 100))
df=data.frame(country=c("US", "GB", "BR"),
val1=c(10,13,14),
val2=c(23,12,32))
Line <- gvisLineChart(df)
plot(Line)
demo(googleVis)
plot(
gvisScatterChart(df,options=list(lineWidth=2))
)
df <- data.frame(year=1:11, x=1:11,
x.scope=c(rep(TRUE, 8), rep(FALSE, 3)),
y=11:1, y.html.tooltip=LETTERS[11:1],
y.certainty=c(rep(TRUE, 5), rep(FALSE, 6)),
y.emphasis=c(rep(FALSE, 4), rep(TRUE, 7)))
plot(
gvisScatterChart(df,options=list(lineWidth=2))
)
sink("FirstNetwork.html")
plot(
gvisScatterChart(df,options=list(lineWidth=2))
)
unlink("FirstNetwork.html")
getwd()
unsink()
getwd()
sink("FirstNetwork.html")
plot(
gvisScatterChart(df,options=list(lineWidth=2))
)
unlink("FirstNetwork.html")
getwd()
?sink
sink()
getwd()
unlink("FirstNetwork.html")
unlink("FirstNetwork.html")
getwd()
sink.number()
getwd()
capture.output(plot(
gvisScatterChart(df,options=list(lineWidth=2))
),file="FirstNetwork.html")
library(googleVis)
df <- data.frame(year=1:11, x=1:11,
x.scope=c(rep(TRUE, 8), rep(FALSE, 3)),
y=11:1, y.html.tooltip=LETTERS[11:1],
y.certainty=c(rep(TRUE, 5), rep(FALSE, 6)),
y.emphasis=c(rep(FALSE, 4), rep(TRUE, 7)))
plot(
gvisScatterChart(df,options=list(lineWidth=2))
)
capture.output(plot(
gvisScatterChart(df,options=list(lineWidth=2))
),file="FirstNetwork.html")
plot(
gvisScatterChart(df,options=list(lineWidth=2))
)
sink("sink-examp.txt")
i <- 1:10
outer(i, i, "*")
sink()
getwd()
sink("googlevisEx.html")
plot(
gvisScatterChart(df,options=list(lineWidth=2))
)
sink()
getwd()
library(sparklyr)
library(dplyr)
sc <- spark_connect(master = "local")
install.packages("sparklyr")
install.packages("sparklyr")
install.packages("sparklyr")
library(nycflights13)
install.packages("nycflights13")
library(nycflights13)
library(nycflights13)
dim(flights)
head(flights)
filter(flights, month == 1, day == 1)
filter(flights, month == 1)
filter(flights, flights$month == 1)
nrow(flights)
?filter
filter(flights, flights$month == 1,flights$day == 1)
filter(flights, flights$month == 1)
arrange(flights, year, month, day)
library(downloader)
install.packages("downloader")
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/msleep_ggplot2.csv"
filename <- "msleep_ggplot2.csv"
if (!file.exists(filename)) download(url,filename)
msleep <- read.csv("msleep_ggplot2.csv")
head(msleep)
sleepData <- select(msleep, name, sleep_total)
library(dplyr)
sleepData <- select(msleep, name, sleep_total)
filter(flights, month == 1,day=1)
filter(flights, month == 1,day==1)
sleepData <- select(msleep, name, sleep_total)
head(sleepData)
install.packages("freejs")
install.packages("tidyverse")
