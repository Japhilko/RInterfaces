url3 <- "http://api.openstreetmap.org/api/0.6/way/72799743"
MadCalle <- xmlParse(url3)
MadCalle
library("RJSONIO")
con <- url("http://nominatim.openstreetmap.org/search?format=json&
addressdetails=1&extratags=1&q=Mannheim+B2,1")
geoc <- fromJSON(paste(readLines(con,warn=F),
collapse = ''))
close(con)
geoloc <- c(geoc[[1]][which(names(geoc[[1]])=="lat")],
geoc[[1]][which(names(geoc[[1]])=="lon")])
df_adr <- data.frame(rbind(c(geoloc$lat,geoloc$lon)))
colnames(df_adr) <- c("lat","lon")
xtable(df_adr,caption = "Latitude and longitude coordinates of the address Mannheim B2,1")
library(xtable)
xtable(df_adr,caption = "Latitude and longitude coordinates of the address Mannheim B2,1")
<<<<<<< HEAD
library(wikipediatrend)
install.packages("wikipediatrend")
library(wikipediatrend)
library(ggplot2)
Pages <- c( "Millennium_Development_Goals", "Climate_Change")
page_views <- wp_trend(
page = Pages )
page_views
data <- read.csv("http://apps.fs.fed.us/fiadb-downloads/CSV/LICHEN_SPECIES_SUMMARY.csv")
head(data)
library (RCurl)
download <- getURL("https://data.kingcounty.gov/api/views/yaai-7frk/rows.csv?accessType=DOWNLOAD")
data <- read.csv (text = download)
library("rvest")
library("dplyr")
library("purrr")
library("tidyr")
library("lazyeval")
library("tibble")
library("fuzzyjoin")
library("stringr")
=======
knitr::opts_chunk$set(echo = TRUE,eval=F)
library("RPostgreSQL")
pw <- {"1234"}
drv <- dbDriver("PostgreSQL")
pw <- {"1234"}
con <- dbConnect(drv, dbname = "offlgeocRLP",
host = "localhost", port = 5432,
user = "postgres", password = pw)
dbExistsTable(con, "planet_osm_polygon")
df_postgres <- dbGetQuery(con, "SELECT name, admin_level FROM planet_osm_polygon WHERE boundary='administrative'")
df_postgres
nrow(df_postgres)
table(df_postgres[,2])
barplot(table(df_postgres[,2]))
barplot(table(df_postgres[,2]),col="royalblue")
df_adm8 <- dbGetQuery(con, "SELECT name, admin_level FROM planet_osm_polygon WHERE boundary='administrative' AND admin_level=8")
df_adm8 <- dbGetQuery(con, "SELECT name, admin_level FROM planet_osm_polygon WHERE boundary='administrative' AND admin_level='8'")
df_adm8
kable(head(df_adm8))
library(knitr)
install.packages("knitr")
library(knitr)
kable(head(df_adm8))
library(knitr)
library("RPostgreSQL")
pw <- {"1234"}
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "offlgeocRLP",
host = "localhost", port = 5432,
user = "postgres", password = pw)
rm(pw) # removes the password
dbExistsTable(con, "planet_osm_polygon")
library(knitr)
kable(head(df_adm8))
library(knitr)
# kable(head(df_adm8))
df_hnr <- dbGetQuery(con, "SELECT addr:housenumber FROM planet_osm_polygon WHERE boundary='administrative' AND admin_level='8' AND name='Hornbach'")
df_hnr <- dbGetQuery(con, "SELECT addr:housenumber FROM planet_osm_polygon WHERE name='Hornbach'")
df_hnr <- dbGetQuery(con, "SELECT * FROM osm_lines,osm_points
WHERE osm_lines.name=='Benzolstraße' AND osm_lines.highway IN ('motorway','trunk','primary')
AND osm_points.name=='Ludwigshafen' AND osm_points.place IN ('city', 'town')
ORDER BY ST_Distance(osm_lines.way, osm_points.way) ASCENDING
LIMIT 1")
df_hnr <- dbGetQuery(con, "SELECT * FROM planet_osm_line, planet_osm_point
WHERE planet_osm_line.name='Benzolstraße' AND planet_osm_line.highway IN ('motorway','trunk','primary')
AND planet_osm_point.name='Ludwigshafen' AND planet_osm_point.place IN ('city', 'town')
ORDER BY ST_Distance(planet_osm_line.way, planet_osm_point.way)")
df_hnr
df_hnr <- dbGetQuery(con, "SELECT * FROM planet_osm_line, planet_osm_point
WHERE planet_osm_line.name='Nordring' AND planet_osm_line.highway IN ('motorway','trunk','primary')
AND planet_osm_point.name='Ludwigshafen' AND planet_osm_point.place IN ('city', 'town')
ORDER BY ST_Distance(planet_osm_line.way, planet_osm_point.way)")
df_hnr <- dbGetQuery(con, "SELECT * FROM planet_osm_line, planet_osm_point
WHERE planet_osm_line.name='Nordring' AND planet_osm_point.name='Ludwigshafen'
ORDER BY ST_Distance(planet_osm_line.way, planet_osm_point.way)")
df_hnr
head(df_hnr)
colnames(df_)
df_ <- dbGetQuery(con, "SELECT * FROM planet_osm_line, planet_osm_point
WHERE planet_osm_line.name='Nordring' AND planet_osm_point.name='Ludwigshafen'
ORDER BY ST_Distance(planet_osm_line.way, planet_osm_point.way)")
head(df_hnr)
colnames(df_)
table(df_$name)
install.packages("plot3D")
library(plot3D)
library(RPostgreSQL)
df_sipp <- dbGetQuery(con, "SELECT * FROM planet_osm_line, planet_osm_point
WHERE planet_osm_line.name='Rechweg' AND planet_osm_point.name='Sippersfeld'
ORDER BY ST_Distance(planet_osm_line.way, planet_osm_point.way)")
head(df_sipp)
pw <- {"1234"}
drv <- dbDriver("PostgreSQL")
# install.packages("RPostgreSQL")
library("RPostgreSQL")
pw <- {"1234"}
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "offlgeocRLP",
host = "localhost", port = 5432,
user = "postgres", password = pw)
rm(pw) # removes the password
dbExistsTable(con, "planet_osm_polygon")
restnam <- dbGetQuery(con, "SELECT name, COUNT(osm_id) AS anzahl
FROM planet_osm_point
WHERE amenity = 'restaurant'
AND name <> ''
GROUP BY name
ORDER BY anzahl DESC
LIMIT 10")
head(restnam)
getwd()
setwd("slides/")
library("knitr")
purl("RPostgreSQL.Rmd")
library("RPostgreSQL")
pw <- {"1234"}
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "offlgeocRLP",
host = "localhost", port = 5432,
user = "postgres", password = pw)
rm(pw) # removes the password
dbExistsTable(con, "planet_osm_polygon")
df_adm8 <- dbGetQuery(con, "SELECT name, admin_level FROM planet_osm_polygon WHERE boundary='administrative' AND admin_level='8'")
head(df_adm8)
dbWriteTable(con, "df_adm8", df_adm8)
df_adm1 <- dbGetQuery(con, "SELECT name, admin_level FROM planet_osm_polygon WHERE boundary='administrative' AND admin_level='1'")
df_adm1
df_adm1 <- dbGetQuery(con, "SELECT name, admin_level FROM planet_osm_polygon WHERE boundary='administrative' AND admin_level='2'")
df_adm1
df_adm1 <- dbGetQuery(con, "SELECT name, admin_level FROM planet_osm_polygon WHERE boundary='administrative' AND admin_level='5'")
df_adm1
df_adm8 <- dbGetQuery(con, "SELECT name, admin_level FROM planet_osm_polygon WHERE boundary='administrative' AND admin_level='8'")
df_adm8
df_adm9 <- dbGetQuery(con, "SELECT name, admin_level FROM planet_osm_polygon WHERE boundary='administrative' AND admin_level='9'")
df_adm9
df_adm10 <- dbGetQuery(con, "SELECT name, admin_level FROM planet_osm_polygon WHERE boundary='administrative' AND admin_level='10'")
df_adm10
df_adm11 <- dbGetQuery(con, "SELECT name, admin_level FROM planet_osm_polygon WHERE boundary='administrative' AND admin_level='11'")
df_adm11
>>>>>>> origin/master
install.packages("readxl")
library(xlsx)
library(inline)
install.packages(inline)
install.packages("inline")
src<- 'int n = as<int>(ns);
double x = as<double>(xs);
for (int i=0; i<n; i++) x=1/(1+x);
return wrap(x);'
l<- cxxfunction(signature(ns="integer",
xs="numeric"),
body=src, plugin="Rcpp")
library(inline)
l<- cxxfunction(signature(ns="integer",
xs="numeric"),
l<- cxxfunction(signature(ns="integer",
xs="numeric"),
body=src, plugin="Rcpp")
l<- cxxfunction(signature(ns="integer",
xs="numeric"),
body=src, plugin="Rcpp")
l<- cxxfunction(signature(ns="integer",
xs="numeric"),body=src, plugin="Rcpp")
install.packages("RPostgreSQL")
library(Rcpp)
cppFunction('int add(int x, int y, int z) {
int sum = x + y + z;
return sum;
}')
# add works like a regular R function
add
add(1, 2, 3)
library(XML)
citation("XML")
a
Sys.which('bash')
Sys.which('sh')
fileXls <- paste(outDir,"newFile.xlsx",sep='/')
fileXls <- "newFile.xlsx"
unlink(fileXls, recursive = FALSE, force = FALSE)
exc <- loadWorkbook(fileXls, create = TRUE)
library("XLConnect")
exc <- loadWorkbook(fileXls, create = TRUE)
createSheet(exc,'Input')
saveWorkbook(exc)
getwd()
input <- data.frame('inputType'=c('Day','Month'),'inputValue'=c(2,5))
writeWorksheet(exc, input, sheet = "input", startRow = 1, startCol = 2)
saveWorkbook(exc)
install.packages("R2wd")
library(R2wd)
wdGet(T)
install.packages("rcom")
Zeiten <- c("10.00 – 11.30","11.30 – 11.45","11.45  - 13.30","13.00 – 14.30","14.30 – 15.30","15.30 – 16.00","16.00 – 18.00","18.00")
length(Zeiten)
Zeiten2 <- c("9.00 – 10.30","10.30 – 10.45","10.45 – 12.30","12.30 – 13.30","13.30 - 16.00","16.00")
Zeiten2
length(Zeiten2)
library(knitr)
install.packages("reticulate")
library(reticulate)
difflib <- import("difflib")
install.packages("flexdashboard", type = "source")
install.packages("highcharter", type = "source")
library(tabplotd3)
install.packages("tabplotd3")
library(tabplotd3)
require(ggplot2)
data(diamonds)
tableplot(diamonds)
library("ggvis")
install.packages("ggvis")
library('DT')
exdat <- read.csv("data/exdat.csv")
setwd("~/GitHub/RInterfaces/slides")
exdat <- read.csv("data/exdat.csv")
datatable(exdat)
?datatable
datatable(head(iris, 20), options = list(
columnDefs = list(list(className = 'dt-center', targets = 5)),
pageLength = 5,
lengthMenu = c(5, 10, 15, 20)
))
datatable(head(exdat, 20), options = list(
columnDefs = list(list(className = 'dt-center', targets = 5)),
pageLength = 5,
lengthMenu = c(5, 10, 15, 20)
))
install.packages("googleVis")
install.packages("d3Network")
library(d3Network)
Source <- c("A", "A", "A", "A", "B", "B", "C", "C", "D")
Target <- c("B", "C", "D", "J", "E", "F", "G", "H", "I")
NetworkData <- data.frame(Source, Target)
d3SimpleNetwork(NetworkData, width = 400, height = 250)
library(d3Network)
Source <- c("A", "A", "A", "A", "B", "B", "C", "C", "D")
Target <- c("B", "C", "D", "J", "E", "F", "G", "H", "I")
NetworkData <- data.frame(Source, Target)
d3SimpleNetwork(NetworkData, width = 400, height = 250)
?d3SimpleNetwork
install.packages("htmlwidgets")
install.packages("htmlwidgets")
library(d3Network)
Source <- c("A", "A", "A", "A", "B", "B", "C", "C", "D")
Target <- c("B", "C", "D", "J", "E", "F", "G", "H", "I")
NetworkData <- data.frame(Source, Target)
d3SimpleNetwork(NetworkData, width = 400, height = 250)
fileConn<-file("FirstNetwork.js")
writeLines(d3SimpleNetwork(NetworkData), fileConn)
close(fileConn)
fileConn<-file("FirstNetwork.js")
writeLines(print(d3SimpleNetwork(NetworkData)), fileConn)
close(fileConn)
devtools::install_github("timelyportfolio/exportwidget")
library(pipeR)
library(htmltools)
library(DiagrammeR)
library(exportwidget)
install.packages("pipeR")
library(htmltools)
library(DiagrammeR)
library(exportwidget)
tagList(
grViz(" digraph { a->b; b->c; c->a; }")
,export_widget( )
) %>>% html_print( viewer = utils::browseURL )
library(pipeR)
tagList(
grViz(" digraph { a->b; b->c; c->a; }")
,export_widget( )
) %>>% html_print( viewer = utils::browseURL )
?html_print
library(d3Network)
Source <- c("A", "A", "A", "A", "B", "B", "C", "C", "D")
Target <- c("B", "C", "D", "J", "E", "F", "G", "H", "I")
NetworkData <- data.frame(Source, Target)
d3SimpleNetwork(NetworkData, width = 400, height = 250)
sink("FirstNetwork.js")
writeLines(d3SimpleNetwork(NetworkData), fileConn)
unlink("FirstNetwork.js")
library(d3Network)
Source <- c("A", "A", "A", "A", "B", "B", "C", "C", "D")
Target <- c("B", "C", "D", "J", "E", "F", "G", "H", "I")
NetworkData <- data.frame(Source, Target)
d3SimpleNetwork(NetworkData, width = 400, height = 250)
d3SimpleNetwork(NetworkData, width = 400, height = 250)
d3SimpleNetwork(NetworkData, width = 400, height = 250,
textColour = "orange", linkColour = "red",
nodeColor = "orange", opacity = 0.9)
d3SimpleNetwork(NetworkData, width = 400, height = 250)
unsink()
unlink()
unlink("FirstNetwork.js")
d3SimpleNetwork(NetworkData, width = 400, height = 250)
library(d3Network)
Source <- c("A", "A", "A", "A", "B", "B", "C", "C", "D")
Target <- c("B", "C", "D", "J", "E", "F", "G", "H", "I")
NetworkData <- data.frame(Source, Target)
d3SimpleNetwork(NetworkData, width = 400, height = 250)
library(googleVis)
df <- data.frame(year=1:11, x=1:11,
x.scope=c(rep(TRUE, 8), rep(FALSE, 3)),
y=11:1, y.html.tooltip=LETTERS[11:1],
y.certainty=c(rep(TRUE, 5), rep(FALSE, 6)),
y.emphasis=c(rep(FALSE, 4), rep(TRUE, 7)))
plot(
gvisScatterChart(df,options=list(lineWidth=2))
)
plot(d3SimpleNetwork(NetworkData, width = 400, height = 250))
plot(d3SimpleNetwork(NetworkData))
firstnetwork <- d3SimpleNetwork(NetworkData, width = 400, height = 250)
firstnetwork
devtools::install_github("rstudio/addinexamples", type = "source")
devtools::install_github("rstudio/ptexamples")
library(dygraphs)
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyRangeSelector(dateWindow = c("1920-01-01", "1960-01-01"))
devtools::install_github("rstudio/addinexamples", type = "source")
devtools::install_github("rstudio/ptexamples")
install.packages("httpuv")
install.packages("tabplotd3")
devtools::install_github("rstudio/ptexamples")
library(googleVis)
op <- options(gvis.plot.tag = "chart")
## Add the mean
CityPopularity$Mean=mean(CityPopularity$Popularity)
CC <- gvisComboChart(CityPopularity, xvar='City',
yvar=c('Mean', 'Popularity'),
options=list(seriesType='bars',
width=450, height=300,
title='City Popularity',
series='{0: {type:\"line\"}}'))
plot(CC)
library(d3Network)
Source <- c("A", "A", "A", "A", "B", "B", "C", "C", "D")
Target <- c("B", "C", "D", "J", "E", "F", "G", "H", "I")
NetworkData <- data.frame(Source, Target)
d3SimpleNetwork(NetworkData, width = 400, height = 250)
d3code <- d3SimpleNetwork(NetworkData, width = 400, height = 250)
library(sigma)
install.packages("sigma")
library(devtools)
install_github('htmlwidgets/sparkline')
x = rnorm(20)
sparkline(x)
library(sparkline)
x = rnorm(20)
sparkline(x)
sparkline(x, type = 'bar')
sparkline(x, type = 'box')
library(rbokeh)
figure() %>%
ly_points(Sepal.Length, Sepal.Width, data = iris,
color = Species, glyph = Species,
hover = list(Sepal.Length, Sepal.Width))
library(readr)
rows <- read_csv("https://data.montgomerycountymd.gov/api/views/6rqk-pdub/rows.csv?accessType=DOWNLOAD")
View(rows)
export(mtcars, "mtcars.dta")
library("rio")
install.packages("rio")
library("rio")
export(mtcars, "mtcars.dta")
getwd()
setwd("data/")
export(mtcars, "mtcars.dta")
convert("mtcars.dta", "mtcars.sav")
export(mtcars, "mtcars.sav")
export(mtcars, "mtcars.sav")
setwd("D:/Eigene Dateien/Dokumente/GitHub/RInterfaces/slides")
library(knitr)
date()
purl("Datenexport.Rmd")
purl("Datenimport.Rmd")
purl("Rexcel.Rmd")
plot(cars)
n <- 10000
ab <- sample(1:10,n)
ab <- sample(1:10,n,replace=T)
head(ab)
x = 'hello, python world!'
print(x)
print(x.split(' '))
install.packages("feather")
install.packages("feather")
dat_chunks <- data.frame(Argument=chunk_names,Beschreibung=chunk_descr)
ab <- cbind(a,b)
install.packages("feather")
library(feather)
flights <- read_feather("flights.feather")
getwd()
res <- fromJSON('http://ergast.com/api/f1/2004/1/results.json')
library(jsonlite)
res <- fromJSON('http://ergast.com/api/f1/2004/1/results.json')
drivers <- res$MRData$RaceTable$Races$Results[[1]]$Driver
colnames(drivers)
install.packages("reticulate")
library(reticulate)
date()
difflib <- import("difflib")
install.packages("inline")
date()
library(knitr)
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
m %>% addTiles()
library("magrittr")
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
library(leaflet)
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
m %>% addTiles()
m %>% addProviderTiles(Stamen.Toner)
m %>% addProviderTiles("Stamen.Toner")
m %>% addProviderTiles("CartoDB.Positron")
leaflet() %>% addTiles() %>% setView(-93.65, 42.0285, zoom = 4) %>%
addWMSTiles(
"http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi",
layers = "nexrad-n0r-900913",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Weather data © 2012 IEM Nexrad"
)
m %>% addProviderTiles(providers$MtbMap) %>%
addProviderTiles(providers$Stamen.TonerLines,
options = providerTileOptions(opacity = 0.35)) %>%
addProviderTiles(providers$Stamen.TonerLabels)
m %>% addProviderTiles("OpenTopoMap")
m %>% addProviderTiles("Thunderforest.OpenCycleMap")
m %>% addProviderTiles(providers$MtbMap) %>%
addProviderTiles("Stamen.TonerLines",
options = providerTileOptions(opacity = 0.35)) %>%
addProviderTiles("Stamen.TonerLabels")
m %>% addProviderTiles("MtbMap") %>%
addProviderTiles("Stamen.TonerLines",
options = providerTileOptions(opacity = 0.35)) %>%
addProviderTiles("Stamen.TonerLabels")
greenLeafIcon <- makeIcon(
iconUrl = "http://leafletjs.com/examples/custom-icons/leaf-green.png",
iconWidth = 38, iconHeight = 95,
iconAnchorX = 22, iconAnchorY = 94,
shadowUrl = "http://leafletjs.com/examples/custom-icons/leaf-shadow.png",
shadowWidth = 50, shadowHeight = 64,
shadowAnchorX = 4, shadowAnchorY = 62
)
leaflet(data = quakes[1:4,]) %>% addTiles() %>%
addMarkers(~long, ~lat, icon = greenLeafIcon)
leaflet(quakes) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)
install.packages("flexdashboard", type = "source")
install.packages("RMySQL")
citation("knitr")
citation("RMySQL")
citation("foreign")
citation("tabplotd3")
citation("ggplot2")
citation("ggvis")
citation("dplyr")
citation("googleVis")
citation("SVGAnnotation")
install.packages("SVGAnnotation")
citation("devtools")
citation("d3Network")
citation("Rook")
citation("dygraphs")
install.packages("dygraphs")
citation("dygraphs")
types <- c("source", "win.binary",
"mac.binary", "mac.binary.mavericks")
CRANmirror <- "http://cran.revolutionanalytics.com"
pdb <- lapply(types, function(x){
cran <- contrib.url(repos = CRANmirror,
type = x)
available.packages(contriburl = cran, type = x)
})
names(pdb) <- types
str(pdb, max.level = 1)
sapply(pdb, nrow)
CRANmirror <- "http://cran.revolutionanalytics.com"
cran <- contrib.url(repos = CRANmirror,
type = "source")
cran
available.packages(contriburl = cran, type = x)
info <- available.packages(contriburl = cran, type = x)
nrow(info)
library(devtools)
install_github("tiagomendesdantas/Rspotify")
802*6
80*6
35*6
300+50+480+210+570
install.packages("rmdformats")
install.packages("rticles")
install.packages("ProjectTemplate")
