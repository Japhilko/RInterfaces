<<<<<<< HEAD
library(knitr)
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
m %>% addTiles()
library("magrittr")
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
library(leaflet)
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
m %>% addTiles()
m %>% addProviderTiles(Stamen.Toner)
m %>% addProviderTiles("Stamen.Toner")
m %>% addProviderTiles("CartoDB.Positron")
leaflet() %>% addTiles() %>% setView(-93.65, 42.0285, zoom = 4) %>%
addWMSTiles(
"http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi",
layers = "nexrad-n0r-900913",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Weather data © 2012 IEM Nexrad"
)
m %>% addProviderTiles(providers$MtbMap) %>%
addProviderTiles(providers$Stamen.TonerLines,
options = providerTileOptions(opacity = 0.35)) %>%
addProviderTiles(providers$Stamen.TonerLabels)
m %>% addProviderTiles("OpenTopoMap")
m %>% addProviderTiles("Thunderforest.OpenCycleMap")
m %>% addProviderTiles(providers$MtbMap) %>%
addProviderTiles("Stamen.TonerLines",
options = providerTileOptions(opacity = 0.35)) %>%
addProviderTiles("Stamen.TonerLabels")
m %>% addProviderTiles("MtbMap") %>%
addProviderTiles("Stamen.TonerLines",
options = providerTileOptions(opacity = 0.35)) %>%
addProviderTiles("Stamen.TonerLabels")
greenLeafIcon <- makeIcon(
iconUrl = "http://leafletjs.com/examples/custom-icons/leaf-green.png",
iconWidth = 38, iconHeight = 95,
iconAnchorX = 22, iconAnchorY = 94,
shadowUrl = "http://leafletjs.com/examples/custom-icons/leaf-shadow.png",
shadowWidth = 50, shadowHeight = 64,
shadowAnchorX = 4, shadowAnchorY = 62
)
leaflet(data = quakes[1:4,]) %>% addTiles() %>%
addMarkers(~long, ~lat, icon = greenLeafIcon)
leaflet(quakes) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)
install.packages("flexdashboard", type = "source")
install.packages("RMySQL")
citation("knitr")
citation("RMySQL")
citation("foreign")
citation("tabplotd3")
citation("ggplot2")
citation("ggvis")
citation("dplyr")
citation("googleVis")
citation("SVGAnnotation")
install.packages("SVGAnnotation")
citation("devtools")
citation("d3Network")
citation("Rook")
citation("dygraphs")
install.packages("dygraphs")
citation("dygraphs")
types <- c("source", "win.binary",
"mac.binary", "mac.binary.mavericks")
CRANmirror <- "http://cran.revolutionanalytics.com"
pdb <- lapply(types, function(x){
cran <- contrib.url(repos = CRANmirror,
type = x)
available.packages(contriburl = cran, type = x)
})
names(pdb) <- types
str(pdb, max.level = 1)
sapply(pdb, nrow)
CRANmirror <- "http://cran.revolutionanalytics.com"
cran <- contrib.url(repos = CRANmirror,
type = "source")
cran
available.packages(contriburl = cran, type = x)
info <- available.packages(contriburl = cran, type = x)
nrow(info)
library(devtools)
install_github("tiagomendesdantas/Rspotify")
802*6
80*6
35*6
300+50+480+210+570
install.packages("rmdformats")
install.packages("rticles")
install.packages("ProjectTemplate")
library(jsonlite)
res <- fromJSON('http://ergast.com/api/f1/2004/1/results.json')
drivers <- res$MRData$RaceTable$Races$Results[[1]]$Driver
colnames(drivers)
hadley_repos <- fromJSON("https://api.github.com/users/hadley/repos")
hadley_repos
head(hadley_repos)
nrow(hadley_repos)
my_repos <- fromJSON("https://api.github.com/users/japhilko/repos")
my_repos
nrow(my_repos)
my_repos[1,]
?install.packages
install.packages("curl")
getwd()
setwd("slides/")
my_repos <- fromJSON("data/RomDrinkingWater.geojson")
library("jsonlite")
my_repos <- fromJSON("data/RomDrinkingWater.geojson")
my_repos
head(DRINKWATER)
DRINKWATER <- fromJSON("data/RomDrinkingWater.geojson")
head(DRINKWATER)
head(DRINKWATER$features)
kable(head(DRINKWATER$features))
names(DRINKWATER$features)
names(DRINKWATER)
kable(head(DRINKWATER$features))
my_repos <- fromJSON("https://api.github.com/users/japhilko/repos")
names(my_repos)
kable(DRINKWATER$features[1:4,1:4])
library(knitr)
kable(DRINKWATER$features[1:4,1:4])
DRINKWATER$features[1:4,1:4]
names(DRINKWATER)
library(xml2)
library(knitr)
kable(head(DRINKWATER$features))
head(DRINKWATER$features)
kable(head(data.frame(DRINKWATER$features)))
head(DRINKWATER$features)
head(DRINKWATER$features[,1:4])
head(DRINKWATER$features[[1]][,1:4])
purl("rapis.Rmd")
library(httr)
r <- GET("http://httpbin.org/get")
r
library("stringi")
library("tm")
library("FactoMineR")
wiki <- "http://de.wikipedia.org/wiki/"
titles <- c("Zika-Virus", "Influenza-A-Virus_H1N1", "Spanische_Grippe", "Influenzavirus","Vogelgrippe_H5N1","Legionellose-Ausbruch_in_Warstein_2013", "Legionellose-Ausbruch_in_Jülich_2014")
articles <- character(length(titles))
for (i in 1:length(titles)){
articles[i] <- stri_flatten(readLines(stri_paste(wiki, titles[i])), col = " ")
}
docs <- Corpus(VectorSource(articles))
graph <- PCA(s)
?PCA
shiny::runApp('misc/shinyApp/FirstShinyEx')
setwd("D:/Eigene Dateien/Dokumente/GitHub/RInterfaces/slides")
install.packages("RMySQL")
install.packages("rmdformats")
install.packages("rmdformats")
install.packages("ProjectTemplate")
library(readr)
rows <- read_csv("https://data.montgomerycountymd.gov/api/views/6rqk-pdub/rows.csv?accessType=DOWNLOAD")
View(rows)
url <- "https://raw.githubusercontent.com/Japhilko/
GeoData/master/2015/data/whcSites.csv"
whcSites <- read.csv(url)
link<- "http://www.statistik.at/web_de/static/
mz_2013_sds_-_datensatz_080469.sav"
Dat <- read.spss(link,to.data.frame=T)
write.dta(mydata,file="mydata.dta")
=======
date()
sessionInfo()
b <- c(1,2)
b <- c(1,2,5)
b
mean(b)
length(b)
b <- c(1,2)
b <- c(1,2,3,4,5)
mean(b)
var(b)
sd(b)
squrt(mean(b))
squrt(3)
b_mean <- mean(b)
b_mean <- mean(b)
sqrt(mean_b)
sqrt(b_mean)
sqrt(mean(b))
SEX <- c("m","w","w","m")
AGE <- c(20,35,48,12)
Daten <- data.frame(Alter=AGE,Geschlecht=SEX)
ls()
ncol(Daten)
nrow(Daten)
dim(Daten)
install.packages("desc")
library(desc)
library("splines", lib.loc="C:/Program Files/R/R-3.3.3/library")
install.packages("lmtest")
library(lmtest)
install.packages("haven")
library(haven)
dir()
oecd <- read.dta("C:\Users\ntuser\Desktop\oecd.dta")
install.packages("rio")
library(rio)
oecd <- read.dta("C:\Users\ntuser\Desktop\oecd.dta")
foreign
>>>>>>> origin/master
library(foreign)
oecd <- read.dta("C:\Users\ntuser\Desktop\oecd.dta")
oecd <- read.dta("C:\\Users\ntuser\Desktop\oecd.dta")
oecd <- read.dta("oecd.dta")
library(haven)
oecd <- read_dta("C:/Users/ntuser/Desktop/oecd.dta")
View(oecd)
oecd
View(oecd)
data(oecd)
ncol(oecd)
nrow(oecd)
getwd()
state.x77
head(state.x77)
A <- matrix(seq(1,100)c(4,25))
A <- matrix(seq(1,100),c(4,25))
B <- matrix(seq(1.100),c(25,4))
apply(A,1,var)
apply(A,1,mean)
apply(B,1,var)
apply(A,1,var)
apply(A,2,var)
apply(B,2,var)
apply(B,2,mean)
apply(A,2,mean)
library(mlmRev)
data(Chem97)
install.packages("mlmRev")
library(mlmRev)
library(mlmRev)
data(Chem97)
hist(Chem97$gcsescore)
?hist
hist(Chem97$gcsescore)
x <- rnorm(100)
y <- rnorm(100)
data("VADeaths")
library(VADeahts)
VADeaths
barplot(VADeaths)
$gcsescore,
horizontal=TRUE)
boxplot(VADeaths,
horizontal=TRUE)
barplot(VADeaths,
horizontal=TRUE)
barplot(tabScore,col=rgb(0,0,1))
barplot(tabScore,col=rgb(0,0,1))
barplot(VADeaths,col=rgb(0,0,1))
VADeaths
View(VADeaths)
barplot(VADeaths$gcsescore~VADeaths$gender)
barplot(VADeaths$gcsescore~VADeaths$gender)
barplot(VADeaths, border = "dark blue", beside = T,
col = c(1,2,3,4,5))
is)
head(iris)
cor(iris$Sepal.Length,iris$Petal.Length)
pairs(iris[,1:4])
?gscescore
?gcsescore
?gcsescore
install.packages("lattice")
install.packages("lattice")
?gcsescore
data <- read.csv("oecd.csv",header = TRUE)
data(oecd)
View(VADeaths)
View(oecd)
data(oecd)
dir()
data(oecd)
data <- read.csv("oecd.csv",header = TRUE)
View(oecd)
install.packages("OECD")
library(oecd)
oecd
library(OECD)
OECD
data(oecd)
library(haven)
oecd <- read_dta("C:/Users/ntuser/Desktop/oecd.dta")
View(oecd)
OECD
install.packages("lattice")
library(lattice)
bwplot(gcsescore ~ gender | factor(score), OECD,
layout = c(6, 1))
save.image("~/0305.RData")
install.packages("dygraphs")
install.packages("networkD3")
install.packages("XLConnect")
install.packages("XLConnectJars")
install.packages("XLConnectJars")
library(readr)
whcSites <- read_csv("~/GitHub/RInterfaces/data/whcSites.csv")
View(whcSites)
getwd()
setwd("D:\Eigene Dateien\Dokumente\GitHub\RInterfaces\data")
setwd("~/")
setwd("D:")
datapath <- "D:/Eigene Dateien/Dokumente/GitHub/RInterfaces/data"
datapath <- "D:/Eigene Dateien/Dokumente/GitHub/RInterfaces/data"
# setwd("D:\Eigene Dateien\Dokumente\GitHub\RInterfaces\data")
datapath <- "D:/Eigene Dateien/Dokumente/GitHub/RInterfaces/data"
plot(1:10)
plot(1:10)
?plot
require(stats) # for lowess, rpois, rnorm
plot(cars)
lines(lowess(cars))
library(readr)
whcSites <- read_csv("https://raw.githubusercontent.com/Japhilko/RInterfaces/master/data/whcSites.csv")
head(whcSites)
View(whcSites)
colnames(whcSites)
nrow(whcSites)
ncol(whcSites)
whcSites$category
table(whcSites$category)
whcSites$category_short
whcSites$category_short=="C/N"
whc_gemischt <- whcSites$category[whcSites$category_short=="C/N",]
whc_gemischt <- whcSites[whcSites$category_short=="C/N",]
nrow(whc_gemischt)
View(whc_gemischt)
summary(whcSites$category_short)
str(whcSites)
typeof(whcSites)
?mean
install.packages("XLconnect")
install.packages("XLConnect")
getwd()
fileXls <- "data/newFile.xlsx"
unlink(fileXls, recursive = FALSE, force = FALSE)
exc <- loadWorkbook(fileXls, create = TRUE)
library(XLConnect)
exc <- loadWorkbook(fileXls, create = TRUE)
createSheet(exc,'Input')
saveWorkbook(exc)
setwd("data")
getwd()
setwd("~/GitHub/RInterfaces")
library(XLConnect)
fileXls <- "data/newFile.xlsx"
createSheet(exc,'Input')
table(whcSites$category_short)
whc_n <- whcSites[whcSites$category_short=="N",]
whc_c <- whcSites[whcSites$category_short=="C",]
writeWorksheet(exc, whc_n, sheet = "Input", startRow = 1, startCol = 1)
createSheet(exc,'whc_c')
writeWorksheet(exc, whc_c, sheet = "whc_c", startRow = 1, startCol = 1)
saveWorkbook(exc)
unlink(fileXls, recursive = FALSE, force = FALSE)
getwd()
<<<<<<< HEAD
unlink("FirstNetwork.html")
unlink("FirstNetwork.html")
getwd()
sink.number()
getwd()
capture.output(plot(
gvisScatterChart(df,options=list(lineWidth=2))
),file="FirstNetwork.html")
library(googleVis)
df <- data.frame(year=1:11, x=1:11,
x.scope=c(rep(TRUE, 8), rep(FALSE, 3)),
y=11:1, y.html.tooltip=LETTERS[11:1],
y.certainty=c(rep(TRUE, 5), rep(FALSE, 6)),
y.emphasis=c(rep(FALSE, 4), rep(TRUE, 7)))
plot(
gvisScatterChart(df,options=list(lineWidth=2))
)
capture.output(plot(
gvisScatterChart(df,options=list(lineWidth=2))
),file="FirstNetwork.html")
plot(
gvisScatterChart(df,options=list(lineWidth=2))
)
sink("sink-examp.txt")
i <- 1:10
outer(i, i, "*")
sink()
getwd()
sink("googlevisEx.html")
plot(
gvisScatterChart(df,options=list(lineWidth=2))
)
sink()
getwd()
CRANmirror <- "http://cran.revolutionanalytics.com"
cran <- contrib.url(repos = CRANmirror,type = "source")
info <- available.packages(contriburl = cran, type = x)
info
nrow(info)
install.packages("networkD3")
install.packages("RMySQL")
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/msleep_ggplot2.csv"
filename <- "msleep_ggplot2.csv"
getwd()
setwd("data/")
if (!file.exists(filename)) download(url,filename)
msleep <- read.csv("msleep_ggplot2.csv")
head(msleep)
head(msleep)
sleepData <- select(msleep, name, sleep_total)
filter(msleep, sleep_total >= 16)
library(dplyr)
filter(msleep, sleep_total >= 16)
filter(msleep, sleep_total >= 16, bodywt >= 1)
msleep %>%
mutate(rem_proportion = sleep_rem / sleep_total) %>%
head
msleep %>%
group_by(order) %>%
summarise(avg_sleep = mean(sleep_total),
min_sleep = min(sleep_total),
max_sleep = max(sleep_total),
total = n())
msleep$order
my_db <- src_sqlite("my_db.sqlite3", create = T)
my_db
=======
fileXls <- "newFile.xlsx"
unlink(fileXls, recursive = FALSE, force = FALSE)
exc <- loadWorkbook(fileXls, create = TRUE)
exc <- loadWorkbook(fileXls, create = TRUE)
createSheet(exc,'Input')
whc_n <- whcSites[whcSites$category_short=="N",]
writeWorksheet(exc, whc_n, sheet = "Input", startRow = 1, startCol = 1)
createSheet(exc,'whc_c')
writeWorksheet(exc, whc_c, sheet = "whc_c", startRow = 1, startCol = 1)
saveWorkbook(exc)
knitr::opts_chunk$set(echo = TRUE)
```{r cars,echo=T,eval=T}
>>>>>>> origin/master
